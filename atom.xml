<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JAVA一家亲</title>
  
  <subtitle>JAVA一家亲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://java.ycute.xyz/"/>
  <updated>2020-02-14T13:23:38.261Z</updated>
  <id>https://java.ycute.xyz/</id>
  
  <author>
    <name>JAVA一家亲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot-redis实现数据库缓存-真香</title>
    <link href="https://java.ycute.xyz/posts/db364b6c.html"/>
    <id>https://java.ycute.xyz/posts/db364b6c.html</id>
    <published>2020-02-10T14:04:08.000Z</published>
    <updated>2020-02-14T13:23:38.261Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个优秀的教程博客一定是先贴源码的！不多说，贴<a href="https://github.com/cutejun/SpringBootJF" target="_blank" rel="noopener">源码</a>！</p></blockquote><p>大家知道在平时的项目开发中，Redis的使用是极其频繁的，作为缓存界的一大利剑，我们无时无刻不与Redis打交道。本文主要讲述如何在SpringBoot项目中引入并使用Redis非关系型数据库作为内存缓存模块，实现SpringBoot项目中依赖缓存模块进行缓存操作，并进行简单测试。</p><blockquote><p>Redis安装以及基础教程:</p><p><a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-install.html</a></p></blockquote><h4 id="0：sql语句"><a href="#0：sql语句" class="headerlink" title="0：sql语句:"></a>0：sql语句:</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure><h4 id="1-引入pom依赖："><a href="#1-引入pom依赖：" class="headerlink" title="1:引入pom依赖："></a>1:引入pom依赖：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入redis依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开启缓存 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数据库连接 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybaits-plus --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2:配置文件:"></a>2:配置文件:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br><span class="line"></span><br><span class="line">#mysql</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/system2?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#mybatis plus </span><br><span class="line">mybatis-plus.mapper-locations=classpath:mapper/*Mapper.xml</span><br><span class="line">mybatis-plus.global-config.db-config.id-type=auto</span><br><span class="line">mybatis-plus.global-config.banner=true</span><br><span class="line"></span><br><span class="line">#redis</span><br><span class="line">spring.cache.type=redis</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><h4 id="3-redis配置类-定义缓存策略"><a href="#3-redis配置类-定义缓存策略" class="headerlink" title="3: redis配置类,定义缓存策略"></a>3: redis配置类,定义缓存策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span>: RedisConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis配置类,定义redis缓存策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-01-06 17:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringRedisSerializer STRING_SERIALIZER = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> GenericJackson2JsonRedisSerializer JACKSON__SERIALIZER = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义缓存数据 key 生成策略的bean 包名+类名+方法名+所有参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">wiselyKeyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (target, method, params) -&gt; &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(target.getClass().getName());</span><br><span class="line">            sb.append(method.getName());</span><br><span class="line">            <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                sb.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 要启用spring缓存支持,需创建一个 CacheManager的 bean，CacheManager 接口有很多实现，这里Redis 的集成，用</span></span><br><span class="line"><span class="comment">     * RedisCacheManager这个实现类 Redis 不是应用的共享内存，它只是一个内存服务器，就像 MySql 似的，</span></span><br><span class="line"><span class="comment">     * 我们需要将应用连接到它并使用某种“语言”进行交互，因此我们还需要一个连接工厂以及一个 Spring 和 Redis 对话要用的</span></span><br><span class="line"><span class="comment">     * RedisTemplate， 这些都是 Redis 缓存所必需的配置，把它们都放在自定义的 CachingConfigurerSupport 中.</span></span><br><span class="line"><span class="comment">     * 并且定义一个过期删除策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(@SuppressWarnings(<span class="string">"rawtypes"</span>)</span> RedisConnectionFactory redisConnectionFactory) </span>&#123;</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line"><span class="comment">//               设置缓存有效期一小时,定时清除策略</span></span><br><span class="line">                .entryTtl(Duration.ofHours(<span class="number">1</span>))                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(STRING_SERIALIZER))              .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(JACKSON__SERIALIZER));</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager       .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.项目启动时此方法先被注册成bean被spring管理,如果没有这个bean，则redis可视化工具中的中文内容（key或者value）都会以二进制存储，不易检查。</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        template.setKeySerializer(STRING_SERIALIZER);</span><br><span class="line">        template.setValueSerializer(JACKSON__SERIALIZER);</span><br><span class="line">        template.setHashKeySerializer(STRING_SERIALIZER);</span><br><span class="line">        template.setHashValueSerializer(JACKSON__SERIALIZER);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写测试Controller"><a href="#4-编写测试Controller" class="headerlink" title="4:编写测试Controller"></a>4:编写测试Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceI userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/1/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: add: 增加操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: com.zallds.redismq.model.Users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Users user = <span class="keyword">new</span> Users();</span><br><span class="line">        user.setCreateTime(DateUtil.getDateTimeFormat(<span class="keyword">new</span> Date()));</span><br><span class="line">        user.setUserName(<span class="string">"add------"</span>+RandomCodeGenerator.generateNumber2());</span><br><span class="line">        <span class="keyword">return</span> userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/1/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [id]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: del: 删除操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/del"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">del</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.del(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/1/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [id]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: update: 更新操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: com.zallds.redismq.model.Users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">update</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">        Users user=userService.getUserById(id);</span><br><span class="line">        user.setCreateTime(DateUtil.getDateTimeFormat(<span class="keyword">new</span> Date()));</span><br><span class="line">        user.setUserName(<span class="string">"update------"</span>+RandomCodeGenerator.generateNumber2());</span><br><span class="line">        <span class="keyword">return</span> userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/1/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [id]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: get: 查询操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: com.zallds.redismq.model.Users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">get</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Controller.get is running"</span>);</span><br><span class="line">        Users userById = userService.getUserById(id);</span><br><span class="line">        <span class="keyword">return</span> userById;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-接口实现类"><a href="#5-接口实现类" class="headerlink" title="5:接口实现类"></a>5:接口实现类</h4><p>接口类自己写或者去源码复制，</p><p>这里面使用redi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/2/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [user]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: insert: 向数据库添加数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: com.zallds.redismq.model.Users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut</span>(key=<span class="string">"#user.getId()"</span>,value = <span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">insert</span><span class="params">(Users user)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"执行service层里的增加操作，更新数据库，更新缓存...."</span>);</span><br><span class="line">        <span class="comment">// System.out.println("执行service层里的增加操作，更新数据库，不更新缓存....");</span></span><br><span class="line">        <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">        <span class="keyword">if</span> (insert==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/2/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [id]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: del: 删除数据库,并且删除缓存中的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(key=<span class="string">"#id"</span>,value = <span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">del</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">        System.out.println(<span class="string">"执行service层中的del，删除数据库，删除缓存...."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"删除成功！！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: java一家亲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/2/7</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: [user]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: update; 查询数据,并且将数据添加至缓存,下次就从缓存里读取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: com.zallds.redismq.model.Users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut</span>(key=<span class="string">"#user.getId()"</span>,value = <span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">update</span><span class="params">(Users user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行service层中的更新操作，更新数据库，更新缓存...."</span>);</span><br><span class="line">        <span class="keyword">int</span> insert = userMapper.updateById(user);</span><br><span class="line">        <span class="keyword">if</span> (insert==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>,key=<span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行service层中的查询，说明缓存中读取不到数据，直接读取数据库...."</span>);</span><br><span class="line">        Users user = userMapper.mselectById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="6-Mapper-xml"><a href="#6-Mapper-xml" class="headerlink" title="6:Mapper.xml"></a>6:Mapper.xml</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.ycute.rediscache.dao.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!-- 映射表字段与实体类属性 --&gt;</span><br><span class="line">        &lt;resultMap id=<span class="string">"BaseResultMap"</span> type=<span class="string">"com.ycute.rediscache.model.Users"</span>&gt;</span><br><span class="line">            &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span> jdbcType=<span class="string">"BIGINT"</span>/&gt;</span><br><span class="line">            &lt;result column=<span class="string">"user_name"</span> property=<span class="string">"userName"</span> jdbcType=<span class="string">"VARCHAR"</span>/&gt;</span><br><span class="line">            &lt;result column=<span class="string">"create_time"</span> property=<span class="string">"createTime"</span> jdbcType=<span class="string">"VARCHAR"</span>/&gt;</span><br><span class="line">        &lt;/resultMap&gt;</span><br><span class="line">        &lt;sql id=<span class="string">"Base_Col_List"</span>&gt;</span><br><span class="line">           id, user_name, create_time</span><br><span class="line">        &lt;/sql&gt;</span><br><span class="line">        &lt;select id=<span class="string">"mselectById"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">            select &lt;include refid="Base_Col_List"/&gt; from users where id=#&#123;id&#125;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>至此，代码贴完，最终，最重要的一步：</p><p><img src="..%5Cimages%5CApplocation.png" alt=""></p><h4 id="7-开启缓存注解-看效果"><a href="#7-开启缓存注解-看效果" class="headerlink" title="7:开启缓存注解,看效果"></a>7:开启缓存注解,看效果</h4><p><img src="..%5Cimages%5Cstart.png" alt=""></p><p>此时，数据库以及缓存里面没有数据</p><p>接着用接口测试神器 <a href=""><strong>Postman</strong></a> 执行三次</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:8888/add</span></span><br></pre></td></tr></table></figure><p>控制台输出在接口实现类里面留下的方法执行输出</p><p><img src="..%5Cimages%5Cadd.png" alt=""></p><p>并且数据库和缓存里出现了刚刚添加的数据</p><p><img src="..%5Cimages%5Cadddate.png" alt=""></p><p>此时测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/get?id=3</span><br></pre></td></tr></table></figure><p><img src="..%5Cimages%5Cget.png" alt=""></p><p>至此，Springboot使用redis做缓存测试完成！</p><p>认真理解这几个注解！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(key=<span class="string">"#user.getId()"</span>,value = <span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@CacheEvict</span>(key=<span class="string">"#id"</span>,value = <span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>,key=<span class="string">"#id"</span>)</span><br></pre></td></tr></table></figure><p>测试将service中 @CachePut(key=”#user.getId()”,value = “user”) 注销掉，执行add操作，在用get请求！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一个优秀的教程博客一定是先贴源码的！不多说，贴&lt;a href=&quot;https://github.com/cutejun/SpringBootJF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码&lt;/a&gt;！&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://java.ycute.xyz/categories/Redis/"/>
    
      <category term="SpringBoot" scheme="https://java.ycute.xyz/categories/SpringBoot/"/>
    
    
      <category term="Redis" scheme="https://java.ycute.xyz/tags/Redis/"/>
    
      <category term="SpringBoot" scheme="https://java.ycute.xyz/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
